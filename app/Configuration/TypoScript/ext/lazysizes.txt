lib.responsiveImage = IMAGE
##########################################
### Responsive Layout for Lazy Loading ###
##########################################
tt_content.image.20.1.layout {
  lazyloading {
    element (
      <picture>
        <!-- Responsive -->
        ###SOURCECOLLECTION###
        <!-- Default -->
        <source srcset="###SRC###" ###ALTPARAMS### ###SELFCLOSINGTAGSLASH### data-width="###WIDTH###" data-height="###HEIGHT###">

        <img
          src="###SRC###"
          width="###WIDTH###"
          height="###HEIGHT###"
          ###PARAMS######ALTPARAMS######BORDER######SELFCLOSINGTAGSLASH###>
      </picture>
    )
    source = <source srcset="###SRC###" media="###MEDIAQUERY###" ###ALTPARAMS### ###SELFCLOSINGTAGSLASH### data-width="###WIDTH###" data-height="###HEIGHT###" data-format="###DATAKEY###">
  }
}
##############################
### Override for Textmedia ###
##############################
lib.responsiveImage {
    defaultCropscaling {
        ## CropScaling for Default Image
        width.override {
            cObject = TEXT
            cObject {
                data = field:data | imagewidth

                override {
                    cObject = TEXT # use cropscaling ratio field if imagewidth is not set
                    cObject {
                        data = field:data | imagewidth
                        stdWrap.dataWrap = |*(16/9)
                        prioriCalc = 1

                        if.isFalse.data = field:data | imagewidth
                    }
                }

                wrap = |c
                if.isTrue.data = field:data | imageborder
            }
        }
        ## CropScaling for Default Image
        height.override {
            cObject = TEXT
            cObject {
                data = field:data | imageheight

                override {
                    cObject = TEXT # use cropscaling ratio field if imageheight is not set
                    cObject {
                        data = field:data | imagewidth
                        stdWrap.dataWrap = |*(1/(16/9))
                        prioriCalc = 1

                        if.isFalse.data = field:data | imageheight
                    }
                }

                wrap = |c
                if.isTrue.data = field:data | imageborder
            }
        }
    }
    sourceCollectionCropscaling {
        width {
            stdWrap {
                wrap = |c
                if.isTrue.data = field:data | imageborder
            }
        }
        height {
            cObject = TEXT
            cObject {
                stdWrap {
                    dataWrap = |*({field:data|imageheight}/{field:data|imagewidth}) # Rewrite Variables
                    dataWrap.override {
                        cObject = COA
                        cObject {
                            10 = TEXT # use cropscaling ratio field if imageheight is not set
                            10 {
                                value = |*(1/(16/9))
                                if.isFalse.data = field:data | imageheight
                            }

                            20 = TEXT # use cropscaling ratio field if imagewidth is not set
                            20 {
                                value = |/(16/9)
                                if.isFals.data = field:data | imagewidth
                            }
                        }
                    }

                }

                prioriCalc = 1
            }

            wrap = |c
            if.isTrue.data = field:data | imageborder
        }
    }
}
######################################
### Lets get smal Image as default ###
######################################
lib.responsiveImage {
  # Make use of CSC file configuration
  file {
    import.data = field:image | uid
    treatIdAsReference = 1

    maxW = 480

    width.data = field:data | imagewidth
    width.override {
      cObject = CASE
      cObject {
        setCurrent.data = field:data | imagecols
        key.data = field:data | imagecols

        default = TEXT
        default.value = 96

        1 < .default
        1.value = 480

        2 < .1

        3 < .default
        3.value = 160

        4 < .default
        4.value = 120
      }

      if {
        value = 480
        isGreaterThan.data = field:data | imagewidth

        isTrue = 1
        isTrue.if {
          isTrue.data = field:data | imagewidth
        }
      }
    }

    height >
    height < lib.responsiveImage.sourceCollectionCropscaling.height
    height.cObject.value < .width

    width.stdWrap < lib.responsiveImage.sourceCollectionCropscaling.width.stdWrap
  }

  # Make use of CSC configuration
  layoutKey = {$styles.content.imgtext.layoutKey}
  layout < tt_content.image.20.1.layout
  params = class="img-fluid lazyload"

  # Add alt and title tag
  altText = TEXT
  altText {
    data = field:image | alternative
    htmlSpecialChars = 1
  }

  titleText < .altText
  titleText.data = field:image | title
}

###############################################
### Responsive Breakpoints for Lazy Loading ###
###############################################
lib.responsiveImage.sourceCollection {
  xl {
    maxW = 1960

    width.data = field:data | imagewidth
    height.data = field:data | imageheight

    width.override < lib.responsiveImage.defaultCropscaling.width.override
    height.override < lib.responsiveImage.defaultCropscaling.height.override

    srcsetCandidate = 1960w
    mediaQuery = (min-device-width:1200px)
    dataKey = xl

    if {
      value = 1200
      isGreaterThan.data = field:data | imagewidth

      isTrue = 1
      isTrue.if {
        isTrue.data = field:data | imagewidth
      }
    }
  }
  lg {
    maxW = 1200

    width = 1200
    width.override.cObject = CASE
    width.override.cObject {
      setCurrent.data = field:data | imagecols
      key.data = field:data | imagecols

      default = TEXT
      default.value = 250

      1 < .default
      1.value = 1200

      2 < .default
      2.value = 600

      3 < .default
      3.value = 400

      4 < .default
      4.value = 300
    }

    height < lib.responsiveImage.sourceCollectionCropscaling.height
    height.cObject.value < .width
    width.stdWrap < lib.responsiveImage.sourceCollectionCropscaling.width.stdWrap

    srcsetCandidate = 1200w
    mediaQuery = (min-device-width:992px)
    dataKey = lg

    if {
      value = 992
      isGreaterThan.data = field:data | imagewidth

      isTrue = 1
      isTrue.if {
        isTrue.data = field:data | imagewidth
      }
    }
  }
  md {
    maxW = 992

    width = 992
    width.override.cObject = CASE
    width.override.cObject {
      setCurrent.data = field:data | imagecols
      key.data = field:data | imagecols

      default = TEXT
      default.value = 199

      1 < .default
      1.value = 992

      2 < .default
      2.value = 496

      3 < .default
      3.value = 331

      4 < .default
      4.value = 248
    }
    height < lib.responsiveImage.sourceCollectionCropscaling.height
    height.cObject.value < .width
    width.stdWrap < lib.responsiveImage.sourceCollectionCropscaling.width.stdWrap

    srcsetCandidate = 992w
    mediaQuery = (min-device-width:768px)
    dataKey = md

    if {
      value = 768
      isGreaterThan.data = field:data | imagewidth

      isTrue = 1
      isTrue.if {
        isTrue.data = field:data | imagewidth
      }
    }
  }
  sm {
    maxW = 768
    width = 768
    width.override.cObject = CASE
    width.override.cObject {
      setCurrent.data = field:data | imagecols
      key.data = field:data | imagecols

      default = TEXT
      default.value = 154

      1 < .default
      1.value = 768

      2 < .default
      2.value = 384

      3 < .default
      3.value = 256

      4 < .default
      4.value = 192
    }
    height < lib.responsiveImage.sourceCollectionCropscaling.height
    height.cObject.value < .width
    width.stdWrap < lib.responsiveImage.sourceCollectionCropscaling.width.stdWrap

    srcsetCandidate = 768w
    mediaQuery = (min-device-width:480px)
    dataKey = sm

    if {
      value = 480
      isGreaterThan.data = field:data | imagewidth

      isTrue = 1
      isTrue.if {
        isTrue.data = field:data | imagewidth
      }
    }
  }
}

##########################
### Load Retina Images ###
##########################
#<INCLUDE_TYPOSCRIPT: source="FILE:fileadmin/Mysite4/app/Configuration/TypoScript/ext/lazysizesRetina.txt">

############################
### EXECUTE LAZY LOADING ###
############################
page.jsInline.91 = TEXT
page.jsInline.91.value (
  /**
   * LazySize.js Placeholder Config
   */
  window.lazySizesConfig = window.lazySizesConfig || {};
  window.lazySizesConfig = {
    addClasses: true,
    expFactor: 1
  };
)